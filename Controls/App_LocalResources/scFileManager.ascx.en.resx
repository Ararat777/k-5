<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="bNewDirectory.Text" xml:space="preserve">
    <value>Create folder</value>
  </data>
  <data name="bUploadFile.Text" xml:space="preserve">
    <value>Upload</value>
  </data>
  <data name="confirmDeleteMessage" xml:space="preserve">
    <value>Are you sure you want to delete file ?</value>
  </data>
  <data name="deleteText.DeleteText" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="directoryExistsMessage" xml:space="preserve">
    <value>Directory {0} exists!</value>
  </data>
  <data name="fileDeleteMsgError" xml:space="preserve">
    <value>Error delete file !</value>
  </data>
  <data name="fileDeleteMsgSuccess" xml:space="preserve">
    <value>File deleted</value>
  </data>
  <data name="fileNameFieldHeader.HeaderText" xml:space="preserve">
    <value>File name</value>
  </data>
  <data name="gvViewFiles.EmptyDataText" xml:space="preserve">
    <value>folder is empty</value>
  </data>
  <data name="lSelectCurDirTextMsg" xml:space="preserve">
    <value> </value>
  </data>
  <data name="lSelectCurDirTextStartMsg" xml:space="preserve">
    <value>please, select folder at left side</value>
  </data>
  <data name="lStatusDirectoryCreated.Text" xml:space="preserve">
    <value>Directory created</value>
  </data>
  <data name="lStatusDirectoryCreateError.Text" xml:space="preserve">
    <value>Error create directory</value>
  </data>
  <data name="lStatusUploadError.Text" xml:space="preserve">
    <value>Error! File not uploaded</value>
  </data>
  <data name="lStatusUploadSuccess.Text" xml:space="preserve">
    <value>File uploaded sucsessfully</value>
  </data>
  <data name="pnUploadFile.GroupingText" xml:space="preserve">
    <value>Upload file to server</value>
  </data>
  <data name="renameOnSaveMessage" xml:space="preserve">
    <value>File was renamed to {0} !</value>
  </data>
  <data name="selectText.SelectText" xml:space="preserve">
    <value>Select</value>
  </data>
  <data name="ErrorMsg_NotCorrectFileExtentsion.Text" xml:space="preserve">
    <value>Wrong file extension, must be: {0}</value>
  </data>
  <data name="lTitle.Text" xml:space="preserve">
    <value>Enter folder name</value>
  </data>
  <data name="bOK.Text" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="lNewFolderName.Text" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="bCancel.Text" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="bDeleteDirectory.Text" xml:space="preserve">
    <value>Delete folder</value>
  </data>
  <data name="confirmDeleteDirectoryMessage" xml:space="preserve">
    <value>Are you sure you want to delete directory</value>
  </data>
  <data name="pnCurDir.GroupingText" xml:space="preserve">
    <value>Current directory</value>
  </data>
  <data name="pnFiles.GroupingText" xml:space="preserve">
    <value>Files</value>
  </data>
  <data name="pnFolders.GroupingText" xml:space="preserve">
    <value>Folders</value>
  </data>
  <data name="pnUpload.GroupingText" xml:space="preserve">
    <value>Upload file</value>
  </data>
  <data name="revalNewFolderName.ErrorMessage" xml:space="preserve">
    <value>only latin letters and digits(0-9)</value>
  </data>
  <data name="lStatusDirectoryCreateErrorNotSelectedCatalog.Text" xml:space="preserve">
    <value>Error create directory, not selected parent folder</value>
  </data>
  <data name="reqFieldNewFolderName.ErrorMessage" xml:space="preserve">
    <value>directory name cannt be empty</value>
  </data>
  <data name="lStatusUploadErrorNotSelectedDirectory.Text" xml:space="preserve">
    <value>Error, not selected directory for upload</value>
  </data>
  <data name="lStatusUploadErrorNullLength.Text" xml:space="preserve">
    <value>Error, file is null length</value>
  </data>
  <data name="ErrorMsg_FatalErrorToUser.Text" xml:space="preserve">
    <value>Error! Sorry, there was a system error. Contact the site administrator.</value>
  </data>
  <data name="lStatusDirectoryRemoved.Text" xml:space="preserve">
    <value>Directory removed</value>
  </data>
  <data name="lStatusDirectoryRemoveDisable.Text" xml:space="preserve">
    <value>You can not delete directory</value>
  </data>
  <data name="lHeader.Text" xml:space="preserve">
    <value>Picture Manager</value>
  </data>
  <data name="ErrorMsg_NotSelectedFile.Text" xml:space="preserve">
    <value>Image is not selected!</value>
  </data>
  <data name="ErrorMsg_NotSelectedUploadImage.Text" xml:space="preserve">
    <value>Please select a file before clicking "{0}".</value>
  </data>
  <data name="ErrorMsg_SelectedBigFile.Text" xml:space="preserve">
    <value>The selected file is too large to upload. Upload file size must not exceed {0} MB.</value>
  </data>
  <data name="MaximumSelectedImageSize.Text" xml:space="preserve">
    <value>You have selected a large image. The recommended size of {0} pixels. WARNING! Click the "Cancel" button to select a different image or click "OK" to convert the image below is the recommended size (the file is saved with the name of the original file with the addition of size, for example, "Picture1_320x150.jpg").</value>
  </data>
  <data name="WarningMsg_SelectAnotherFile" xml:space="preserve">
    <value>When converting the selected file, we found that the file {0} {1} already exists. Select it, maybe this will solve your problem.</value>
  </data>
  <data name="WarningMsg_SelectAnotherFile_Header" xml:space="preserve">
    <value>Attention!</value>
  </data>
  <data name="CreatedDateAsc" xml:space="preserve">
    <value>ascending creation date</value>
  </data>
  <data name="CreatedDateDesc" xml:space="preserve">
    <value>descending creation date</value>
  </data>
  <data name="fileNameAsc" xml:space="preserve">
    <value>ascending filename</value>
  </data>
  <data name="fileNameDesc" xml:space="preserve">
    <value>descending the file name</value>
  </data>
  <data name="lSort.Text" xml:space="preserve">
    <value>Sort by:</value>
  </data>
  <data name="lbCancelCreateDirectory.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="lbCreateDirectory.Text" xml:space="preserve">
    <value>ОК</value>
  </data>
</root>